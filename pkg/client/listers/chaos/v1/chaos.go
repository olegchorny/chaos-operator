/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olegchorny/chaos-operator/pkg/apis/chaos/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChaosLister helps list Chaoses.
type ChaosLister interface {
	// List lists all Chaoses in the indexer.
	List(selector labels.Selector) (ret []*v1.Chaos, err error)
	// Chaoses returns an object that can list and get Chaoses.
	Chaoses(namespace string) ChaosNamespaceLister
	ChaosListerExpansion
}

// chaosLister implements the ChaosLister interface.
type chaosLister struct {
	indexer cache.Indexer
}

// NewChaosLister returns a new ChaosLister.
func NewChaosLister(indexer cache.Indexer) ChaosLister {
	return &chaosLister{indexer: indexer}
}

// List lists all Chaoses in the indexer.
func (s *chaosLister) List(selector labels.Selector) (ret []*v1.Chaos, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Chaos))
	})
	return ret, err
}

// Chaoses returns an object that can list and get Chaoses.
func (s *chaosLister) Chaoses(namespace string) ChaosNamespaceLister {
	return chaosNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChaosNamespaceLister helps list and get Chaoses.
type ChaosNamespaceLister interface {
	// List lists all Chaoses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Chaos, err error)
	// Get retrieves the Chaos from the indexer for a given namespace and name.
	Get(name string) (*v1.Chaos, error)
	ChaosNamespaceListerExpansion
}

// chaosNamespaceLister implements the ChaosNamespaceLister
// interface.
type chaosNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Chaoses in the indexer for a given namespace.
func (s chaosNamespaceLister) List(selector labels.Selector) (ret []*v1.Chaos, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Chaos))
	})
	return ret, err
}

// Get retrieves the Chaos from the indexer for a given namespace and name.
func (s chaosNamespaceLister) Get(name string) (*v1.Chaos, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("chaos"), name)
	}
	return obj.(*v1.Chaos), nil
}
